<<<<<<< Updated upstream
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position = "none")
plot
tibble(x=seq(from = logit_fiel, to = logit_ocasional, by =0.01))
ggplot(data = mydata, mapping = aes(x = x, y=logistic)) +
## Entire curve
geom_path(aes(colour=""), size=1.5, alpha=0.8) +
geom_vline(xintercept = logit_fiel, color = "blue", size=1.5) +
geom_vline(xintercept = logit_ocasional, color = "red", size=1.5) +
labs(y="P(e < xb)", x="e") +
scale_color_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position = "none")  +
geom_ribbon(data= tibble(x=seq(from = logit_fiel, to = logit_ocasional, by =0.01)), aes(ymin=0, ymax=plogis(x)),fill="blue",alpha=0.5)
plot <- ggplot(data = mydata, mapping = aes(x = x, y=logistic)) +
## Entire curve
geom_path(aes(colour=""), size=1.5, alpha=0.8) +
geom_vline(xintercept = logit_fiel, color = "blue", size=1.5) +
geom_vline(xintercept = logit_ocasional, color = "red", size=1.5) +
labs(y="P(e < xb)", x="e") +
scale_color_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position = "none")  +
geom_ribbon(data= tibble(x=seq(from = logit_fiel, to = logit_ocasional, by =0.01)), aes(x=x, y=plogis(x), ymin=0, ymax=plogis(x)),fill="blue",alpha=0.5)
plot
xaringan:::inf_mr()
predict(ologit_affairs_rate, newdata = data.frame(rate=1), type = "probs")
mydata <- data_frame(x = seq(from = -5, to = 5, by =0.01), logit = plogis(x) )
plot <- ggplot(data = mydata, mapping = aes(x = x)) +
## Entire curve
geom_path(aes(y=logit,color=""), size=1.5, alpha=0.8) +
labs(y="P(e < xb)", x="e") +
scale_color_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
geom_vline(xintercept = xb_1, color = "blue", size=1.5) +
geom_hline(yintercept = plogis(xb_1), color = "blue", size=1.5, linetype="dotted") +
annotate(geom="text", x= xb_1 + 2.2, y=0.1, label='bold("xb_1 =  0.83 - 0.5")', color="black", parse=TRUE, size=8) +
geom_ribbon(data= tibble(x=seq(from = -5, to = xb_1, by =0.01)), aes(x=x, y=plogis(x), ymin=0, ymax=plogis(x)),fill="blue",alpha=0.5)
print(plot)
-0.9 -0.52
plogis(-0.9 -0.52)
plogis(-0.9 + 0.52)
1- plogis(-0.9 - 0.52)
xaringan:::inf_mr()
plogis(logit_ocasional)
plogis(-0.89217118)
plogis(-0.07045263 )
prop.table(table(affairsdata$affairs))
ologit_affairs_rate$zeta
mydata <- data_frame(x = seq(from = -5, to = 5, by =0.01), logistic = dlogis(x))
mydata
ologit_affairs_rate$zeta
plogis(1000)
plogis(10 - 1000)
grid <- affairsdata %>% data_grid(rate=seq(-5,10),.model = ologit_affairs_rate)
predictions <- cbind(grid,predict(ologit_affairs_rate, newdata=grid, type="prob")) %>%
pivot_longer(-rate, names_to="outcome",values_to="p" ) %>%
mutate(p_outcome = paste0("p_",outcome)) %>% dplyr::select(-outcome) %>%
pivot_wider(names_from = p_outcome, values_from=p) %>%
mutate(p_ocasional_less = p_fiel + p_ocasional, p_compulsivo_less = p_fiel + p_ocasional + p_compulsivo) %>%
pivot_longer(-rate, names_to="quant", values_to="est")
grid <- affairsdata %>% data_grid(rate=seq(-5,10),.model = ologit_affairs_rate)
predictions <- cbind(grid,predict(ologit_affairs_rate, newdata=grid, type="prob")) %>%
pivot_longer(-rate, names_to="outcome",values_to="p" ) %>%
mutate(p_outcome = paste0("p_",outcome)) %>% dplyr::select(-outcome) %>%
pivot_wider(names_from = p_outcome, values_from=p) %>%
mutate(p_ocasional_less = p_fiel + p_ocasional, p_compulsivo_less = p_fiel + p_ocasional + p_compulsivo) %>%
pivot_longer(-rate, names_to="quant", values_to="est")
predictions
xaringan:::inf_mr()
ologit_affairs_rate$coefficients
grid <- affairsdata %>% data_grid(rate=seq(-5,10),.model = ologit_affairs_rate)
predictions <- cbind(grid, y_latente = ologit_affairs_rate$coefficients*rate)
grid %>% muate(y_latente = ologit_affairs_rate$coefficients*rate)
grid %>% mutate(y_latente = ologit_affairs_rate$coefficients*rate)
predictions <- grid %>% mutate(y_latente = ologit_affairs_rate$coefficients*rate)
predictions %>%
ggplot(aes(x=rate, y=y_latente,colour="quant")) +
geom_path(alpha=0.5, size=1.5) +
scale_color_viridis_d() +  scale_fill_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="top") +
labs(x="rate marriage", y="y*")
ologit_affairs_rate$zeta
coefs <- summary(ologit_affairs_rate_sex)$coefficients[1:2,c(1,2)]coefs
coefs <- summary(ologit_affairs_rate_sex)$coefficients[1:2,c(1,2)]; coefs
exp(-coefs)
0.8*(0.2)
0.7*(0.3)
0.8*(0.2) - 0.7*(0.3)
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" ) %>%
mutate(p_outcome = paste0("p_",outcome)) %>% dplyr::select(-outcome)
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" ) %>%
mutate(p_outcome = paste0("p_",outcome)) %>% dplyr::select(-outcome) %>%
pivot_wider(names_from = p_outcome, values_from=p)
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
predictions %>%
ggplot(aes(x=rate, y=p, group=interaction(quant,sex), colour=quant)) +
geom_path(aes(linetype=sex), alpha=0.5, size=1.5) +
scale_color_viridis_d() +  scale_fill_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="top") +
labs(x="rate marriage", y="P( y= j)")
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
predictions %>%
ggplot(aes(x=rate, y=p, group=interaction(outcome,sex), colour=outcome)) +
geom_path(aes(linetype=sex), alpha=0.5, size=1.5) +
scale_color_viridis_d() +  scale_fill_viridis_d() +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="top") +
labs(x="rate marriage", y="P( y= j)")
xaringan:::inf_mr()
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
predictions
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob"))
ologit_affairs_rate_sex$coefficients[1,1]
ologit_affairs_rate_sex$coefficients[1]
beta_rate = ologit_affairs_rate_sex$coefficients[1]
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
mutate(me_fiel = -beta_rate*fiel*(1-file)) %>%
mutate(me_ocasional = -beta_rate*(ocasional*(1-ocasional) - fiel*(1-file))) %>%
mutate(me_compulsivo = beta_rate*compulsivo*(1-compulsivo))
-beta_rate
cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
mutate(me_fiel = -beta_rate*fiel*(1-fiel)) %>%
mutate(me_ocasional = -beta_rate*(ocasional*(1-ocasional) - fiel*(1-fiel))) %>%
mutate(me_compulsivo = beta_rate*compulsivo*(1-compulsivo))
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
mutate(me_fiel = -beta_rate*fiel*(1-fiel)) %>%
mutate(me_ocasional = -beta_rate*(ocasional*(1-ocasional) - fiel*(1-fiel))) %>%
mutate(me_compulsivo = beta_rate*compulsivo*(1-compulsivo)) %>%
select(starts_with("me")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
beta_rate = ologit_affairs_rate_sex$coefficients[1]
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
mutate(me_fiel = -beta_rate*fiel*(1-fiel)) %>%
mutate(me_ocasional = -beta_rate*(ocasional*(1-ocasional) - fiel*(1-fiel))) %>%
mutate(me_compulsivo = beta_rate*compulsivo*(1-compulsivo)) %>%
dplyr::select(starts_with("me")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
beta_rate = ologit_affairs_rate_sex$coefficients[1]
grid <- affairsdata %>% data_grid(rate,sex, .model = ologit_affairs_rate_sex)
predictions <- cbind(grid,predict(ologit_affairs_rate_sex, newdata=grid, type="prob")) %>%
mutate(me_fiel = -beta_rate*fiel*(1-fiel)) %>%
mutate(me_ocasional = -beta_rate*(ocasional*(1-ocasional) - fiel*(1-fiel))) %>%
mutate(me_compulsivo = beta_rate*compulsivo*(1-compulsivo)) %>%
dplyr::select(rate,sex,starts_with("me")) %>%
pivot_longer(-c(rate,sex), names_to="outcome",values_to="p" )
predictions
=======
>>>>>>> Stashed changes
predict(ologit_affairs_rate_sex, type="probs")
predict(ologit_affairs_rate_sex, type="probs") %>% as_tibble()  %>% mutate(id = row_number()) %>%
pivot_longer(-id, names_to="vote", values_to="prob")
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="vote", values_to="prob_delta")
delta = 0.1
affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="vote", values_to="prob_delta")
affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number())
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="affair", values_to="prob_delta")
affairsdata_delta
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_sq = (prob_delta  - prob)/delta) %>% dplyr::select(id,vote,me_sq) %>% pivot_wider(names_from = "affair", values_from = "me_sq") %>% drop_na()
delta = 0.1
p_hat <- predict(ologit_affairs_rate_sex, type="probs") %>% as_tibble()  %>% mutate(id = row_number()) %>%
pivot_longer(-id, names_to="vote", values_to="prob")
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="affair", values_to="prob_delta")
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_sq = (prob_delta  - prob)/delta) %>% dplyr::select(id,vote,me_sq) %>% pivot_wider(names_from = "affair", values_from = "me_sq") %>% drop_na()
delta = 0.1
p_hat <- predict(ologit_affairs_rate_sex, type="probs") %>% as_tibble()  %>% mutate(id = row_number()) %>%
pivot_longer(-id, names_to="affair", values_to="prob")
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="affair", values_to="prob_delta")
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_sq = (prob_delta  - prob)/delta) %>% dplyr::select(id,vote,me_sq) %>% pivot_wider(names_from = "affair", values_from = "me_sq") %>% drop_na()
delta = 0.1
p_hat <- predict(ologit_affairs_rate_sex, type="probs") %>% as_tibble()  %>% mutate(id = row_number()) %>%
pivot_longer(-id, names_to="affair", values_to="prob")
affairsdata_delta <- affairsdata %>% mutate(rate = rate + delta)
p_hat_delta <- predict(ologit_affairs_rate_sex, newdata=affairsdata_delta ,type="probs")  %>% as_tibble() %>% mutate(id = row_number()) %>% pivot_longer(-id, names_to="affair", values_to="prob_delta")
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_rate = (prob_delta  - prob)/delta) %>% dplyr::select(id,affair,me_rate) %>% pivot_wider(names_from = "affair", values_from = "me_rate") %>% drop_na()
p_hat_delta
p_hat_delta %>% dplyr::summarise(across(fiel:compulsivo, ~ mean(.x)))
summary(margins(ologit_affairs_rate_sex, variables = "rate"))
library("margins")
p_hat_delta %>% dplyr::summarise(across(fiel:compulsivo, ~ mean(.x)))
summary(margins(ologit_affairs_rate_sex, variables = "rate"))
p_hat_delta %>% dplyr::summarise(across(fiel:compulsivo, ~ mean(.x)))
grid <- affairsdata %>% data_grid(sex, .model=ologit_affairs_rate_sex)
grid_delta <- affairsdata %>% data_grid(sex, .model=ologit_affairs_rate_sex) %>% mutate(rate = rate + delta)
p_hat <- predict(ologit_affairs_rate_sex, type="probs", newdata =grid) %>% as_tibble()
p_hat
grid
p_hat <- predict(ologit_affairs_rate_sex, type="probs", newdata =grid) %>% as_tibble() %>%
mutate(id = c("F","M"))%>% pivot_longer(-id, names_to="affair", values_to="prob")
p_hat
p_hat_delta <- predict(ologit_affairs_rate_sex, type="probs", newdata =grid_delta) %>% as_tibble() %>%
mutate(id = c("F","M")) %>% pivot_longer(-id, names_to="affair", values_to="prob_delta")
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_rate = (prob_delta  - prob)/delta) %>% dplyr::select(id,vote,me_rate) %>% pivot_wider(names_from = "affair", values_from = "me_rate") %>% drop_na(); p_hat_delta
p_hat_delta <- p_hat_delta %>% left_join(p_hat, by=c("id","affair")) %>% mutate(me_rate = (prob_delta  - prob)/delta) %>% dplyr::select(id,affair,me_rate) %>% pivot_wider(names_from = "affair", values_from = "me_rate") %>% drop_na(); p_hat_delta
xaringan:::inf_mr()
delta = 0.1
grid <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2)
p_hat
delta = 0.1
grid <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2)
library("tinytex")
library("tidyverse")
library("nnet")
library("modelr")
library("MASS")
library("tinytex")
library("tidyverse")
library("nnet")
library("modelr")
library("MASS")
data_paper <- read_csv("data_t_2.csv") %>% mutate(W=if_else(W=="TRUE",1,0))
data_paper %>% glimpse()
data_paper$LTC <- factor(data_paper$LTC, levels = c("rules","talent","luck"))
mnlr_1 <- multinom(LTC ~ T*W, data=data_paper)
summary(mnlr_1)
exp(summary(mnlr_1)$coefficients)[,"TRE1"]
newx <- data_paper %>% data_grid(T="RA",W,.model=mnlr_1)
newy <- cbind(newx,predict(mnlr_1, newdata = newx, type = "probs")) %>% dplyr::select(talent)
print(newy)
mnlr_2 <- multinom(LTC ~ T*W + age, data=data_paper)
summary(mnlr_2)
delta = 0.1
grid <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2)
grid_delta <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2) %>% mutate(age = age + delta)
p_hat <- predict(mnlr_2, type="probs", newdata =grid) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat = value)
p_hat_delta <- predict(mnlr_2, type="probs", newdata =grid_delta) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat_delta = value)
p_hat_delta %>% left_join(p_hat, by=c("id")) %>% mutate(me_age = (p_hat_delta  - p_hat)/delta)
data_paper$LTC <- ordered(data_paper$LTC, levels = c("rules","luck","talent"))
ologit_1 <- polr(LTC ~ T*W, data=data_paper)
summary(ologit_1)
exp(-(summary(ologit_1)$coefficients["TRE1",1]))
newx <- data_paper %>% data_grid(T="RA",W,.model=ologit_1)
newy <- cbind(newx,predict(ologit_1, newdata = newx, type = "probs")) %>% dplyr::select(talent)
print(newy)
ologit_2 <- polr(LTC ~ T*W + age, data=data_paper)
summary(ologit_2)
delta = 0.1
grid <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=ologit_2)
grid_delta <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=ologit_2) %>% mutate(age = age + delta)
p_hat <- predict(ologit_2, type="probs", newdata =grid) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat = value)
p_hat_delta <- predict(ologit_2, type="probs", newdata =grid_delta) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat_delta = value)
p_hat_delta %>% left_join(p_hat, by=c("id")) %>% mutate(me_age = (p_hat_delta  - p_hat)/delta)
predict(ologit_2, type="probs", newdata =grid)
predict(ologit_2, type="probs", newdata =grid) %>% as_tibble()
predict(ologit_2, type="probs", newdata =grid) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent"))
p_hat_delta %>% left_join(p_hat, by=c("id")) %>% mutate(me_age = (p_hat_delta  - p_hat)/delta)
delta = 0.1
grid <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2)
grid_delta <- data_paper %>% data_grid(T="RA",W=0,age=20, .model=mnlr_2) %>% mutate(age = age + delta)
p_hat <- predict(mnlr_2, type="probs", newdata =grid) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat = value)
p_hat_delta <- predict(mnlr_2, type="probs", newdata =grid_delta) %>% as_tibble() %>%
mutate(id = c("rules","luck","talent")) %>% rename(p_hat_delta = value)
p_hat_delta
p_hat_delta %>% left_join(p_hat, by=c("id")) %>% mutate(me_age = (p_hat_delta  - p_hat)/delta)
predict(mnlr_2, type="probs", newdata =grid) %>% as_tibble()
predict(mnlr_2, type="probs", newdata =grid)
j=1
while (j < 100) {
print(j)
j = (2*j)/j
}
j=1
while (j < 100) {
print(j)
j = (j+1)/j
}
j=1
while (j < 100) {
print(j)
j = j/(j+1)
}
j=1
while (j > 0.99) {
print(j)
j = j/(j+1)
}
j=1
while (j < 0.99) {
print(j)
j = j/(j+1)
}
j=1
while (j < 10) {
print(j)
j = j/(j+1)
}
j=1
while (j < 10) {
print(j)
j = (j+1)/j
}
j=1
while (j < 1000) {
print(j)
j =j^2
}
j=1
while (j < 1000) {
print(j)
j=sqrt(j+1)
}
sqrt(2)
j
j=1
print(j)
j=sqrt(j+1)
j
sqrt(1.414214+1)
j=1
while (j < 1000) {
print(j)
j=(j+1)^3
}
8^3
9^3
j=1
while (j < 10000) {
print(j)
j=(j+1)^3
}
j=1
while (j < 10) {
print(j)
j=(j+1)^2
}
j=1
while (j < 100) {
print(j)
j=(j+1)^2
}
j=1
while (j < 1000) {
print(j)
j=(j+1)^2
}
j=1
while (j < 10000) {
print(j)
j=(j+1)^2
}
j=0
while (j < 100) {
print(j)
j=(j+1)^2
}
j=0
while (j < 1000) {
print(j)
j=(j+1)^2
}
xaringan:::inf_mr()
?assign(
?assign
)
?assign
covid_data  %>% glimpse()
setwd(
"~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_12/")
# leer archivo csv
covid_data <- read_delim("covid_data.csv", delim=";")
covid_data <- covid_data %>% filter(date==as.Date("2020-11-17"))
covid_data  %>% glimpse()
2.2 crea una tabla por separado para cada (y) con el $R^2$ obtenido con cada predictor (x)
---
## "Almacenar resultados": `assign()`
covid_data %>% ggplot(y=total_cases_per_million,x=population_density) + geom_point()
covid_data %>% ggplot(y=total_cases_per_million,x=population_density) + geom_point()
covid_data %>% ggplot(aes(y=total_cases_per_million,x=population_density)) + geom_point()
covid_data %>% with(lm(total_cases_per_million ~ population_density))
lm(total_cases_per_million ~ population_density)
lm(total_cases_per_million ~ population_density) -> a
lm(total_cases_per_million ~ population_density, data=covid_data) -> a
summary(a)
summary(a)$r2
summary(a)$r.2
summary(a) -> sa
sa$r.squared
covid_data %>% with(lm(total_cases_per_million ~ population_density))
covid_data %>% with(lm(total_cases_per_million ~ population_density)) %>% summary()
plot1 <- covid_data %>% ggplot(aes(y=total_cases_per_million,x=population_density)) + geom_point()
lm1 <- lm(total_cases_per_million ~ population_density, data=covid_data)
lm1
summary(lm1)$r.squared
for (dv in c("total_cases_per_million", "total_deaths_per_million")) {
for (iv in  c("population_density", "median_age", "gdp_per_capita")) {
y <- sym(dv)
x <- sym(iv)
print(covid_data %>% with(lm(y ~ x)))
}
}
covid_data %>% with(lm(total_cases_per_million ~ population_density)) %>% summary()
y <- sym(dv)
y
for (dv in c("total_cases_per_million", "total_deaths_per_million")) {
for (iv in  c("population_density", "median_age", "gdp_per_capita")) {
y <- sym(dv)
x <- sym(iv)
print(covid_data %>% with(lm(y ~ x)))
}
}
dv
sym(paste("covid_data$",dv))
for (dv in c("total_cases_per_million", "total_deaths_per_million")) {
for (iv in  c("population_density", "median_age", "gdp_per_capita")) {
y <- sym(paste("covid_data$",dv))
x <- sym(paste("covid_data$",iv))
print(covid_data %>% with(lm(y ~ x)))
}
}
for (dv in c("total_cases_per_million", "total_deaths_per_million")) {
for (iv in  c("population_density", "median_age", "gdp_per_capita")) {
y <- covid_data[,dv]
x <- covid_data[,iv]
print(lm(y ~ x))
}
}
dv
covid_data[,dv]
for (dv in c("total_cases_per_million", "total_deaths_per_million")) {
for (iv in  c("population_density", "median_age", "gdp_per_capita")) {
y <- covid_data[,dv] %>% as.matrix()
x <- covid_data[,iv] %>% as.matrix()
print(lm(y ~ x))
}
}
covid_data %>% ggplot( aes(y=sym(dv),x=sym(iv) )) + geom_point()
covid_data %>% ggplot( aes(y=sym(dv),x=sym(iv)))
covid_data %>% ggplot( aes_string(y=dv,x=iv)) + geom_point()
2*3*3*6
mydata
map(.x=covid_data,
.f= ~ ggplot(data= ., aes(x=total_cases_per_million, y=population_density)) + geom_point()  )
map(.x=covid_data,
.f= ~ ggplot(data= ., aes(x=total_cases_per_million, y=population_density)) + geom_point()  )
covid_data
map(.x=covid_data,
.f= ~ ggplot(data= .x, aes(x=total_cases_per_million, y=population_density)) + geom_point()  )
ggplot(data=covid_data, aes(x=total_cases_per_million, y=population_density)) + geom_point()
map(covid_data,  ~ ggplot(data= .x) + geom_point( aes(x=total_cases_per_million, y=population_density))
)
map( covid_data,  ~ ggplot(data= .x) + geom_point(aes(x=total_cases_per_million, y=population_density)) )
library("tidyvers")
library("tidyversr")
library("tidyverse")
library("lubridate")
map( covid_data,  ~ ggplot(data= .x) + geom_point(aes(x=total_cases_per_million, y=population_density)) )
map( covid_data,  ~ ggplot(data= .x) + geom_point(aes_string(x=total_cases_per_million, y=population_density)) )   #
map( covid_data,  ~ ggplot(data= .x) + geom_point(aes_string(x=total_cases_per_million, y=population_density)) )
map( covid_data,  ~ ggplot(data= .x) + geom_point(aes_string(x="total_cases_per_million", y="population_density")) )
map(mydata,  ~ ggplot(data= .x) + geom_point(aes(x=x, y=y)) )
map(mydata,  ~ ggplot(data= .x))
mydata
mydata %>% mutate(a = map(.,  ~ ggplot(data= .x)) )
?cor
covid_data %>% with(cor(y=total_cases_per_million,x=population_density))
cor1 <- covid_data %>% with(cor(y=total_cases_per_million,x=population_density, na.rm=T))
cor1 <- covid_data %>% with(cor(y=total_cases_per_million,x=population_density, use="pairwise"))
cor1
2*2*2*6
map(.x=covid_data, .f= ~ lm(total_cases_per_million ~ population_density, data=.x))
map(.x=covid_data, .f= ~ lm(total_cases_per_million ~ population_density, data=.))
map(.x=covid_data,  ~ lm(total_cases_per_million ~ population_density, data=.x))
covid_data
<<<<<<< Updated upstream
covid_data %>% map(~ lm(total_cases_per_million ~ median_age, data = .x)
covid_data %>% map(~ lm(total_cases_per_million ~ median_age, data = .x)
covid_data %>% map(~ lm(total_cases_per_million ~ median_age, data = .x)
)
covid_data %>% map(~ lm(total_cases_per_million ~ median_age, data = .x))
covid_data %>% map(. ~ lm(total_cases_per_million ~ median_age, data = .x))
covid_data %>% split()
covid_data %>% split()
covid_data %>% split(.$1)
covid_data %>% split(.$continent)
covid_data %>% split(.$continent) %>%
map( ~ lm(total_cases_per_million ~ median_age, data = .x))
covid_data %>% map(. ~ lm(.x$total_cases_per_million ~ .x$median_age))
covid_data %>% map2(. ~ lm(.x$total_cases_per_million ~ .x$median_age))
covid_data %>% map(. ~ lm(.x$total_cases_per_million ~ .x$median_age))
=======
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled()
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
scale_fill_viridis_c() +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled(alpha = 0.5) +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled(alpha = 0.8) +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million,
x=hospital_beds_per_thousand,
group=continent,
colour=continent
)) +
geom_point(alpha=0.3) +
scale_x_log10() + scale_y_log10() +
geom_smooth(method = "lm", se=F) +
labs(x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.") +
facet_wrap(continent ~ .) +
theme_bw() +
theme(legend.position = "bottom")
covid_data %>% ggplot(aes(y=total_deaths_per_million,
x=hospital_beds_per_thousand)) +
geom_point(alpha=0.3) +
scale_x_log10() + scale_y_log10() +
geom_smooth(method = "lm", se=F)
covid_data %>% ggplot(aes(y=total_deaths_per_million,
x=hospital_beds_per_thousand,
group=continent,
colour=continent
)) +
geom_point(alpha=0.3) +
scale_x_log10() + scale_y_log10() +
geom_smooth(method = "lm", se=F) +
labs(x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.") +
facet_wrap(continent ~ .) +
theme_bw() +
theme(legend.position = "bottom")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=hospital_beds_per_thousand)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data  %>% glimpse()
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=gdp_per_capita)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="Camas de hospital por mil hbs.", y="muertes totales por millón hbs.")
covid_data %>% ggplot(aes(y=total_deaths_per_million, x=gdp_per_capita)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="GDP per cápita", y="muertes totales por millón hbs.")
p <- covid_data %>% ggplot(aes(y=total_deaths_per_million, x=gdp_per_capita)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="GDP per cápita", y="muertes totales por millón hbs.")
p
ggsave(p,"miprimerggplor.pdf", width = 20, height = 20, units = "cm")
?ggsave
p <- covid_data %>% ggplot(aes(y=total_deaths_per_million, x=gdp_per_capita)) +
scale_x_log10() + scale_y_log10() +
geom_density_2d_filled() +
labs(title="Grafico de densidad",  x="GDP per cápita", y="muertes totales por millón hbs.")
ggsave("miprimerggplor.pdf", p, width = 20, height = 20, units = "cm")
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
>>>>>>> Stashed changes
